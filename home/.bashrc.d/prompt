[ -f /etc/bash_completion.d/git-prompt ] && . /etc/bash_completion.d/git-prompt

if [ -n "$PS1" ] && [ "$TERM" != "dumb" ] ;then
  # GIT #
  LP_ENABLE_GIT=1
  [[ "$LP_ENABLE_GIT"  = 1 ]] && { command -v git  >/dev/null || LP_ENABLE_GIT=0  ; }
  _lp_escape()
  {
      printf "%q" "$*"
  }

  if [ -n "${HOSTNAME_PROMPT_OVERRIDE}" ]
  then
    _LP_HOSTNAME="${HOSTNAME_PROMPT_OVERRIDE}"
  else
    _LP_HOSTNAME="$(hostname)"
  fi
      ti_sgr0="$( { tput sgr0 || tput me ; } 2>/dev/null )"
      #ti_bold="$( { tput bold || tput md ; } 2>/dev/null )"
      ti_bold="" #DISABLED
      if tput setaf >/dev/null 2>&1 ; then
          ti_setaf () { tput setaf "$1" ; }
      elif tput AF >/dev/null 2>&1 ; then
          # *BSD
          ti_setaf () { tput AF "$1" ; }
      elif tput AF 1 >/dev/null 2>&1 ; then
          # OpenBSD
          ti_setaf () { tput AF "$1" ; }
      else
          echo "liquidprompt: terminal $TERM not supported" >&2
          ti_setaf () { : ; }
      fi
  
      _LP_SHELL_bash=true
      _LP_SHELL_zsh=false
      _LP_OPEN_ESC=""
      _LP_CLOSE_ESC=""
      _LP_USER_SYMBOL="\u"
      _LP_HOST_SYMBOL="\h"
      _LP_TIME_SYMBOL="\t"
      _LP_MARK_SYMBOL='\$'
      _LP_FIRST_INDEX=0
      _LP_PWD_SYMBOL="\\w"
  
  
      # Colors: variables are local so they will have a value only
      # during config loading and will not conflict with other values
      # with the same names defined by the user outside the config.
      BOLD="${_LP_OPEN_ESC}${ti_bold}${_LP_CLOSE_ESC}"
      BLACK="${_LP_OPEN_ESC}$(ti_setaf 0)${_LP_CLOSE_ESC}"
      BOLD_GRAY="${_LP_OPEN_ESC}${ti_bold}$(ti_setaf 0)${_LP_CLOSE_ESC}"
      GREY="${_LP_OPEN_ESC}$(ti_setaf 7)${_LP_CLOSE_ESC}"
      #WHITE="${_LP_OPEN_ESC}$(ti_setaf 9)${_LP_CLOSE_ESC}"
      WHITE="$(echo -e "\e[39m")"
      BOLD_WHITE="${_LP_OPEN_ESC}${ti_bold}$(ti_setaf 7)${_LP_CLOSE_ESC}"
      RED="${_LP_OPEN_ESC}$(ti_setaf 1)${_LP_CLOSE_ESC}"
      BOLD_RED="${_LP_OPEN_ESC}${ti_bold}$(ti_setaf 1)${_LP_CLOSE_ESC}"
      WARN_RED="${_LP_OPEN_ESC}$(ti_setaf 0 ; tput setab 1)${_LP_CLOSE_ESC}"
      CRIT_RED="${_LP_OPEN_ESC}${ti_bold}$(ti_setaf 7 ; tput setab 1)${_LP_CLOSE_ESC}"
      DANGER_RED="${_LP_OPEN_ESC}${ti_bold}$(ti_setaf 3 ; tput setab 1)${_LP_CLOSE_ESC}"
      GREEN="${_LP_OPEN_ESC}$(ti_setaf 2)${_LP_CLOSE_ESC}"
      BOLD_GREEN="${_LP_OPEN_ESC}${ti_bold}$(ti_setaf 2)${_LP_CLOSE_ESC}"
      YELLOW="${_LP_OPEN_ESC}$(ti_setaf 3)${_LP_CLOSE_ESC}"
      BOLD_YELLOW="${_LP_OPEN_ESC}${ti_bold}$(ti_setaf 3)${_LP_CLOSE_ESC}"
      BLUE="${_LP_OPEN_ESC}$(ti_setaf 4)${_LP_CLOSE_ESC}"
      BOLD_BLUE="${_LP_OPEN_ESC}${ti_bold}$(ti_setaf 4)${_LP_CLOSE_ESC}"
      PURPLE="${_LP_OPEN_ESC}$(ti_setaf 5)${_LP_CLOSE_ESC}"
      PINK="${_LP_OPEN_ESC}${ti_bold}$(ti_setaf 5)${_LP_CLOSE_ESC}"
      CYAN="${_LP_OPEN_ESC}$(ti_setaf 6)${_LP_CLOSE_ESC}"
      BOLD_CYAN="${_LP_OPEN_ESC}${ti_bold}$(ti_setaf 6)${_LP_CLOSE_ESC}"
      # NO_COL is special: it will be used at runtime, not just during config loading
      NO_COL="${_LP_OPEN_ESC}${ti_sgr0}${_LP_CLOSE_ESC}"
      unset ti_sgr0 ti_bold ti_setaf
  
      LP_COLOR_PATH=${LP_COLOR_PATH:-$BOLD}
      LP_COLOR_PATH_ROOT=${LP_COLOR_PATH_ROOT:-$BOLD_YELLOW}
      LP_COLOR_PROXY=${LP_COLOR_PROXY:-$BOLD_BLUE}
      LP_COLOR_JOB_D=${LP_COLOR_JOB_D:-$YELLOW}
      LP_COLOR_JOB_R=${LP_COLOR_JOB_R:-$BOLD_YELLOW}
      LP_COLOR_JOB_Z=${LP_COLOR_JOB_Z:-$BOLD_YELLOW}
      LP_COLOR_ERR=${LP_COLOR_ERR:-$PURPLE}
      LP_COLOR_MARK=${LP_COLOR_MARK:-$BOLD}
      LP_COLOR_MARK_ROOT=${LP_COLOR_MARK_ROOT:-$BOLD_RED}
      LP_COLOR_USER_LOGGED=${LP_COLOR_USER_LOGGED:-""}
      LP_COLOR_USER_ALT=${LP_COLOR_USER_ALT:-$BOLD}
      LP_COLOR_USER_ROOT=${_ROOT:-$BOLD_YELLOW}
      LP_COLOR_HOST=${LP_COLOR_HOST:-""}
      LP_COLOR_SSH=${LP_COLOR_SSH:-$BLUE}
      LP_COLOR_SU=${LP_COLOR_SU:-$BOLD_YELLOW}
      LP_COLOR_TELNET=${LP_COLOR_TELNET:-$WARN_RED}
      LP_COLOR_X11_ON=${LP_COLOR_X11:-$GREEN}
      LP_COLOR_X11_OFF=${LP_COLOR_X11:-$YELLOW}
      LP_COLOR_WRITE=${LP_COLOR_WRITE:-$GREEN}
      LP_COLOR_NOWRITE=${LP_COLOR_NOWRITE:-$RED}
      LP_COLOR_UP=${LP_COLOR_UP:-$GREEN}
      LP_COLOR_COMMITS=${LP_COLOR_COMMITS:-$YELLOW}
      LP_COLOR_CHANGES=${LP_COLOR_CHANGES:-$RED}
      LP_COLOR_DIFF=${LP_COLOR_DIFF:-$PURPLE}
      LP_COLOR_CHARGING_ABOVE=${LP_COLOR_CHARGING_ABOVE:-$GREEN}
      LP_COLOR_CHARGING_UNDER=${LP_COLOR_CHARGING_UNDER:-$YELLOW}
      LP_COLOR_DISCHARGING_ABOVE=${LP_COLOR_DISCHARGING_ABOVE:-$YELLOW}
      LP_COLOR_DISCHARGING_UNDER=${LP_COLOR_DISCHARGING_UNDER:-$RED}
      LP_COLOR_TIME=${LP_COLOR_TIME:-$BLUE}
      LP_COLOR_IN_MULTIPLEXER=${LP_COLOR_IN_MULTIPLEXER:-$BOLD_BLUE}
      LP_COLOR_RUNTIME=${LP_COLOR_RUNTIME:-$YELLOW}
  
      LP_COLORMAP_0=${LP_COLORMAP_0:-""}
      LP_COLORMAP_1=${LP_COLORMAP_1:-$GREEN}
      LP_COLORMAP_2=${LP_COLORMAP_2:-$BOLD_GREEN}
      LP_COLORMAP_3=${LP_COLORMAP_3:-$YELLOW}
      LP_COLORMAP_4=${LP_COLORMAP_4:-$BOLD_YELLOW}
      LP_COLORMAP_5=${LP_COLORMAP_5:-$RED}
      LP_COLORMAP_6=${LP_COLORMAP_6:-$BOLD_RED}
      LP_COLORMAP_7=${LP_COLORMAP_7:-$WARN_RED}
      LP_COLORMAP_8=${LP_COLORMAP_8:-$CRIT_RED}
      LP_COLORMAP_9=${LP_COLORMAP_9:-$DANGER_RED}
  
  # Get the branch name of the current directory
  _lp_git_branch()
  {
      [[ "$LP_ENABLE_GIT" != 1 ]] && return
      local gitdir
      gitdir="$([ $(\git ls-files . 2>/dev/null | wc -l) -gt 0 ] && \git rev-parse --git-dir 2>/dev/null)"
      [[ $? -ne 0 || ! $gitdir =~ (.*\/)?\.git.* ]] && return
      local branch
      # Recent versions of Git support the --short option for symbolic-ref, but
      # not 1.7.9 (Ubuntu 12.04)
      if branch="$(\git symbolic-ref -q HEAD)"; then
          _lp_escape "${branch#refs/heads/}"
      else
          # In detached head state, use commit instead
          # No escape needed
          \git rev-parse --short -q HEAD
      fi
  }
  
  # Set a color depending on the branch state:
  # - green if the repository is up to date
  # - yellow if there is some commits not pushed
  # - red if there is changes to commit
  #
  # Add the number of pending commits and the impacted lines.
  _lp_git_branch_color()
  {
      [[ "$LP_ENABLE_GIT" != 1 ]] && return
  
      local branch
      branch="$(_lp_git_branch)"
      if [[ -n "$branch" ]] ; then
  
          local end
          end="$NO_COL"
          if LC_ALL=C \git status 2>/dev/null | grep -q '\(# Untracked\)'; then
              end="$LP_COLOR_CHANGES$LP_MARK_UNTRACKED$end"
          fi
  
          if [[ -n "$(\git stash list 2>/dev/null)" ]]; then
              end="$LP_COLOR_COMMITS$LP_MARK_STASH$end"
          fi
  
          local remote
          remote="$(\git config --get branch.${branch}.remote 2>/dev/null)"
  
          local has_commit
          has_commit=0
          if [[ -n "$remote" ]] ; then
              local remote_branch
              remote_branch="$(\git config --get branch.${branch}.merge)"
              if [[ -n "$remote_branch" ]] ; then
                  has_commit="$(\git rev-list --no-merges --count ${remote_branch/refs\/heads/refs\/remotes\/$remote}..HEAD 2>/dev/null)"
                  if [[ -z "$has_commit" ]] ; then
                      has_commit=0
                  fi
              fi
          fi
  
          local ret
          local shortstat # only to check for uncommitted changes
          shortstat="$(LC_ALL=C \git diff --shortstat HEAD 2>/dev/null)"
  
          if [[ -n "$shortstat" ]] ; then
              local u_stat # shorstat of *unstaged* changes
              u_stat="$(LC_ALL=C \git diff --shortstat 2>/dev/null)"
              u_stat=${u_stat/*changed, /} # removing "n file(s) changed"
  
              local i_lines # inserted lines
              if [[ "$u_stat" = *insertion* ]] ; then
                  i_lines=${u_stat/ inser*}
              else
                  i_lines=0
              fi
  
              local d_lines # deleted lines
              if [[ "$u_stat" = *deletion* ]] ; then
                  d_lines=${u_stat/*\(+\), }
                  d_lines=${d_lines/ del*/}
              else
                  d_lines=0
              fi
  
              local has_lines
              has_lines="+$i_lines/-$d_lines"
  
              if [[ "$has_commit" -gt "0" ]] ; then
                  # Changes to commit and commits to push
                  ret="${LP_COLOR_CHANGES}${branch}${NO_COL}(${LP_COLOR_DIFF}$has_lines${NO_COL},${LP_COLOR_COMMITS}$has_commit${NO_COL})"
              else
                  ret="${LP_COLOR_CHANGES}${branch}${NO_COL}(${LP_COLOR_DIFF}$has_lines${NO_COL})" # changes to commit
              fi
          else
              if [[ "$has_commit" -gt "0" ]] ; then
                  # some commit(s) to push
                  ret="${LP_COLOR_COMMITS}${branch}${NO_COL}(${LP_COLOR_COMMITS}$has_commit${NO_COL})"
              else
                  ret="${LP_COLOR_UP}${branch}" # nothing to commit or push
              fi
          fi
          echo -ne "$ret$end"
      fi
  }
  
  
  #export PS1='${YELLOW}($?) [ ${PURPLE}\u${GREY}@${GREEN}${_LP_HOSTNAME}${GREY}:${CYAN}\w $(_lp_git_branch_color)${YELLOW}]\n\$${WHITE} '

  export        PS1='${YELLOW}($?)|${CYAN}\w'
  export  PS1="$PS1"'${YELLOW}|${PURPLE}\u${GREY}@${GREEN}${_LP_HOSTNAME}'
  export  PS1="$PS1"'${YELLOW}|${CYAN}$(__git_ps1)${YELLOW}|'
  export  PS1="$PS1"'${WHITE}\n\$ '
fi
